-- MySQL Script generated by MySQL Workbench
-- qui 30 jan 2020 11:30:34 -03
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema avistdb
-- -----------------------------------------------------
-- Banco de Dados do Sistema de Rota da Vinícolas - Avist.

-- -----------------------------------------------------
-- Schema avistdb
--
-- Banco de Dados do Sistema de Rota da Vinícolas - Avist.
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `avistdb` DEFAULT CHARACTER SET utf8 ;
USE `avistdb` ;

-- -----------------------------------------------------
-- Table `avistdb`.`TipoEmpresa` (Empresa_Tipos)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `avistdb`.`TipoEmpresa` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nomeEmpresaTipo` TINYTEXT NULL,
  PRIMARY KEY (`codTipoEmpresa`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `avistdb`.`Empresa` (Empresas)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `avistdb`.`Empresa` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `empresa_tipo_id` INT NOT NULL,
  `nomeEmpresa` TINYTEXT NULL,
  `linkGoogleMaps` TINYTEXT NULL,
  `latitude` FLOAT NULL,
  `longitude` FLOAT NULL,
-- //  `infos` TINYTEXT NULL,
-- //  `biografia` TINYTEXT NULL,
-- //  `email` TINYTEXT NULL,
  PRIMARY KEY (`codEmpresa`),
  INDEX `fk_Empresa_TipoEmpresa1_idx` (`TipoEmpresa_codTipoEmpresa` ASC),
  CONSTRAINT `fk_Empresa_TipoEmpresa1`
    FOREIGN KEY (`TipoEmpresa_codTipoEmpresa`)
    REFERENCES `avistdb`.`TipoEmpresa` (`codTipoEmpresa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `avistdb`.`Pessoa` (Empresa_Pessoas)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `avistdb`.`Pessoa` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `empresa_id` INT NOT NULL,
  `nome` TINYTEXT NULL COMMENT '	',
  `email` TINYTEXT NULL,
  PRIMARY KEY (`codPessoa`),
  INDEX `fk_Pessoa_Empresa1_idx` (`Empresa_codEmpresa` ASC),
  CONSTRAINT `fk_Pessoa_Empresa1`
    FOREIGN KEY (`Empresa_codEmpresa`)
    REFERENCES `avistdb`.`Empresa` (`codEmpresa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `avistdb`.`TipoContato` (Contato_Tipos)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `avistdb`.`TipoContato` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nomeContatoTipo` TINYTEXT NULL,
  PRIMARY KEY (`codTipoContato`))
ENGINE = InnoDB
COMMENT = 'Identifica os tipos de formas de contato com a empresa (Telefones / Redes sociais).';


-- -----------------------------------------------------
-- Table `avistdb`.`Contato` (Empresa_Contatos)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `avistdb`.`Contato` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `empresa_id` INT NOT NULL,
  `contato_tipo_id` INT NOT NULL,
  `descricao` TINYTEXT NULL COMMENT 'Informar o número do telefone ou o perfil da empresa nas redes sociais.',
  PRIMARY KEY (`codContato`),
  INDEX `fk_TelefoneEmpresa_Empresa1_idx` (`Empresa_codEmpresa` ASC),
  INDEX `fk_Contato_TipoContato1_idx` (`TipoContato_TipoContato` ASC),
  CONSTRAINT `fk_TelefoneEmpresa_Empresa1`
    FOREIGN KEY (`Empresa_codEmpresa`)
    REFERENCES `avistdb`.`Empresa` (`codEmpresa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Contato_TipoContato1`
    FOREIGN KEY (`TipoContato_TipoContato`)
    REFERENCES `avistdb`.`TipoContato` (`codTipoContato`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Informação sobre os telefones e as redes sociais da empresa.';


-- -----------------------------------------------------
-- Table `avistdb`.`Endereco` (Empresa_Enderecos)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `avistdb`.`Endereco` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `empresa_id` INT NOT NULL,
  `rua` TINYTEXT NULL,
  `numero` TINYTEXT NULL,
  `complemento` TINYTEXT NULL,
  `bairro` TINYTEXT NULL,
  `cidade` TINYTEXT NULL,
  `estado` TINYTEXT NULL,
  `cep` TINYTEXT NULL,
  PRIMARY KEY (`codEndereco`),
  INDEX `fk_Endereco_Empresa1_idx` (`Empresa_codEmpresa` ASC),
  CONSTRAINT `fk_Endereco_Empresa1`
    FOREIGN KEY (`Empresa_codEmpresa`)
    REFERENCES `avistdb`.`Empresa` (`codEmpresa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `avistdb`.`TipoImagem` (Imagem_Tipos)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `avistdb`.`TipoImagem` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nomeImagemTipo` TINYTEXT NULL,
  PRIMARY KEY (`codTipoImagem`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `avistdb`.`Imagem` (Empresa_Imagems)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `avistdb`.`Imagem` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `empresa_id` INT NOT NULL,
  `imagem_tipo_id` INT NOT NULL,
  `caminho` TINYTEXT NULL,
  `descricao` TINYTEXT NULL,
  `ordem` VARCHAR(45) NULL,
  PRIMARY KEY (`codImagem`),
  INDEX `fk_Imagem_Empresa1_idx` (`Empresa_codEmpresa` ASC),
  INDEX `fk_Imagem_TipoImagem1_idx` (`TipoImagem_codTipoImagem` ASC),
  CONSTRAINT `fk_Imagem_Empresa1`
    FOREIGN KEY (`Empresa_codEmpresa`)
    REFERENCES `avistdb`.`Empresa` (`codEmpresa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Imagem_TipoImagem1`
    FOREIGN KEY (`TipoImagem_codTipoImagem`)
    REFERENCES `avistdb`.`TipoImagem` (`codTipoImagem`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `avistdb`.`TipoInformacao` (Informacao_Tipos)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `avistdb`.`TipoInformacao` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nomeInformacaoTipo` TINYTEXT NULL,
  PRIMARY KEY (`codTipoInformacao`))
ENGINE = InnoDB
COMMENT = 'Identifica os tipos de informações da empresa (Ex.: Histórico, Descrição da Empresa, Missão, Valores)';


-- -----------------------------------------------------
-- Table `avistdb`.`Informacao` (Empresa_Informacaos)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `avistdb`.`Informacao` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `empresa_id` INT NOT NULL,
  `informacao_tipo_id` INT NOT NULL,
  `descricao` TEXT NULL,
  PRIMARY KEY (`codInformacao`),
  INDEX `fk_Informacao_Empresa1_idx` (`Empresa_codEmpresa` ASC),
  INDEX `fk_Informacao_TipoInformacao1_idx` (`TipoInformacao_codTipoInformacao` ASC),
  CONSTRAINT `fk_Informacao_Empresa1`
    FOREIGN KEY (`Empresa_codEmpresa`)
    REFERENCES `avistdb`.`Empresa` (`codEmpresa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Informacao_TipoInformacao1`
    FOREIGN KEY (`TipoInformacao_codTipoInformacao`)
    REFERENCES `avistdb`.`TipoInformacao` (`codTipoInformacao`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Armazena as descrições sobre a empresa.';


-- -----------------------------------------------------
-- Table `avistdb`.`Produto` (Empresa_Produtos)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `avistdb`.`Produto` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `empresa_id` INT NOT NULL,
  `nome` TINYTEXT NULL,
  `descricao` TINYTEXT NULL,
  `ativo` BOOLEAN NOT NULL DEFAULT TRUE, --// BOOLEAN ??? CONFERIR SE TEM ESSE TIPO
  PRIMARY KEY (`codProduto`),
  INDEX `fk_Produto_Empresa1_idx` (`Empresa_codEmpresa` ASC),
  CONSTRAINT `fk_Produto_Empresa1`
    FOREIGN KEY (`Empresa_codEmpresa`)
    REFERENCES `avistdb`.`Empresa` (`codEmpresa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Identifica os produtos disponibilizados pela empresa. A coluna Ativo indica se o produto deve ou não aparecer nas listagens.';


-- -----------------------------------------------------
-- Table `avistdb`.`Servico` (Empresa_Servicos)
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `avistdb`.`Servico` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `empresa_id` INT NOT NULL,
  `nome` TINYTEXT NULL,
  `descricao` TINYTEXT NULL,
  `horario` TINYTEXT NULL,
  `ativo` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`codServico`),
  INDEX `fk_Servico_Empresa1_idx` (`Empresa_codEmpresa` ASC),
  CONSTRAINT `fk_Servico_Empresa1`
    FOREIGN KEY (`Empresa_codEmpresa`)
    REFERENCES `avistdb`.`Empresa` (`codEmpresa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Identifica os serviços disponibilizados pela empresa. A coluna Ativo indica se o serviço deve ou não aparecer nas listagens.';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `avistdb`.`TipoEmpresa` (Empresa_Tipos)
-- -----------------------------------------------------
START TRANSACTION;
USE `avistdb`;
INSERT INTO `avistdb`.`TipoEmpresa` (`codTipoEmpresa`, `nomeTipoEmpresa`) VALUES (DEFAULT, 'Associação');
INSERT INTO `avistdb`.`TipoEmpresa` (`codTipoEmpresa`, `nomeTipoEmpresa`) VALUES (DEFAULT, 'Vinícola / Cantina');
INSERT INTO `avistdb`.`TipoEmpresa` (`codTipoEmpresa`, `nomeTipoEmpresa`) VALUES (DEFAULT, 'Parceiro');
INSERT INTO `avistdb`.`TipoEmpresa` (`codTipoEmpresa`, `nomeTipoEmpresa`) VALUES (DEFAULT, 'Colaborador');

COMMIT;


-- -----------------------------------------------------
-- Data for table `avistdb`.`TipoContato` (Contato_Tipos)
-- -----------------------------------------------------
START TRANSACTION;
USE `avistdb`;
INSERT INTO `avistdb`.`TipoContato` (`codTipoContato`, `nomeTipoContato`) VALUES (DEFAULT, 'Telefone Fixo');
INSERT INTO `avistdb`.`TipoContato` (`codTipoContato`, `nomeTipoContato`) VALUES (DEFAULT, 'Whatsapp');
INSERT INTO `avistdb`.`TipoContato` (`codTipoContato`, `nomeTipoContato`) VALUES (DEFAULT, 'Email');
INSERT INTO `avistdb`.`TipoContato` (`codTipoContato`, `nomeTipoContato`) VALUES (DEFAULT, 'Facebook');
INSERT INTO `avistdb`.`TipoContato` (`codTipoContato`, `nomeTipoContato`) VALUES (DEFAULT, 'Instagram');
INSERT INTO `avistdb`.`TipoContato` (`codTipoContato`, `nomeTipoContato`) VALUES (DEFAULT, 'Twitter');
INSERT INTO `avistdb`.`TipoContato` (`codTipoContato`, `nomeTipoContato`) VALUES (DEFAULT, 'YouTube');

COMMIT;


-- -----------------------------------------------------
-- Data for table `avistdb`.`TipoImagem` (Imagem_Tipos)
-- -----------------------------------------------------
START TRANSACTION;
USE `avistdb`;
INSERT INTO `avistdb`.`TipoImagem` (`codTipoImagem`, `nomeTipoImagem`) VALUES (DEFAULT, 'Logomarca');
INSERT INTO `avistdb`.`TipoImagem` (`codTipoImagem`, `nomeTipoImagem`) VALUES (DEFAULT, 'Carrossel');
INSERT INTO `avistdb`.`TipoImagem` (`codTipoImagem`, `nomeTipoImagem`) VALUES (DEFAULT, 'Fotos');
INSERT INTO `avistdb`.`TipoImagem` (`codTipoImagem`, `nomeTipoImagem`) VALUES (DEFAULT, 'QR-Code');

COMMIT;


-- -----------------------------------------------------
-- Data for table `avistdb`.`TipoInformacao` (Informacao_Tipos)
-- -----------------------------------------------------
START TRANSACTION;
USE `avistdb`;
INSERT INTO `avistdb`.`TipoInformacao` (`codTipoInformacao`, `descTipoInformacao`) VALUES (DEFAULT, 'Histórico');
INSERT INTO `avistdb`.`TipoInformacao` (`codTipoInformacao`, `descTipoInformacao`) VALUES (DEFAULT, 'Descrição da Empresa');
INSERT INTO `avistdb`.`TipoInformacao` (`codTipoInformacao`, `descTipoInformacao`) VALUES (DEFAULT, 'Missão');
INSERT INTO `avistdb`.`TipoInformacao` (`codTipoInformacao`, `descTipoInformacao`) VALUES (DEFAULT, 'Valores');
INSERT INTO `avistdb`.`TipoInformacao` (`codTipoInformacao`, `descTipoInformacao`) VALUES (DEFAULT, 'Outros');

COMMIT;

